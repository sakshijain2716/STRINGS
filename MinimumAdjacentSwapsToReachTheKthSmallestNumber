class Solution {
public:
    int getMinSwaps(string num, int k) {
        int n = num.size();
        int cnt=0;
        string tar = num;
        // //finding kth number
        // while(k)
        // {
        //     int j=n-2;
        //     while(j>=0 && num[j]>=num[j+1]){ //next smaller number
        //     j--;
        //     }
        //     if(j<0)
        //     break;
        //     int i=n-1;
        //     while(i>j && num[i]<=num[j])  // number > than smallest no. from last
        //     i--;
        //     swap(num[i],num[j]);
        //     reverse(num.begin()+j+1 , num.end());
           
        //     k--;
        // }

        while(k--)       //METHOD 2
        next_permutation(num.begin(),num.end());
    //finding minimum swaps
    
        for(int i=0;i<n;i++)
        {
            if(num[i]!=tar[i])
            {
                int j=i+1;
    //kth no. me vo digit find kr rhe jo original no ki present digit k eqal ho
                while(j<n && tar[i]!=num[j])
                j++;

                while(j>i)  //no. of swaps cnt kr rhe jisse orgin no ki digit or kth no. ki digit same ajae 
                {
                    swap(num[j],num[j-1]);
                    j--;
                    cnt++;
                }
            }
        }
        return cnt;
        
    }
};
